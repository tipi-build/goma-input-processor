# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Copied from chromium third_party/protobuf and revised for goma client

config("protobuf_config") {
  include_dirs = [ "protobuf/src", "protobuf" ]
  defines = [
    "GOOGLE_PROTOBUF_NO_RTTI",
    "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
  ]

  # Needs to set HAVE_ZLIB to use Gzip{Input,Output}Stream.
  defines += [ "HAVE_ZLIB" ]
  if (os != "win") {
    defines += [ "HAVE_PTHREAD" ]
  }
}

config("protobuf_warnings") {
  cflags = []
  if (is_clang) {
    cflags += [
      # protobuf-3 contains a few functions that are unused.
      "-Wno-unused-function",

      "-Wno-inconsistent-missing-override",

      # This is for `friend class DynamicMessage` in map_field.h
      "-Wno-microsoft-unqualified-friend",

      # descriptor_ is not used in csharp_source_generator_base.h
      "-Wno-unused-private-field",
      "-Wno-invalid-offsetof",
    ]
  } else if (is_win_gcc) {
    cflags = [
      "-Wno-stringop-overflow",
      "-Wno-type-limits",
      "-Wno-invalid-offsetof",
    ]
  }
}

# This config should be applied to targets using generated code from the proto
# compiler. It sets up the include directories properly.
config("using_proto") {
  include_dirs = [
    "protobuf/src",
    "$root_gen_dir",
  ]

  cflags = []

  if (is_posix || is_clang || is_win_gcc) {
    cflags += [
      # Not to warn for headers.
      "-Wno-deprecated",
      "-Wno-implicit-fallthrough",
      "-Wno-missing-field-initializers",
      "-Wno-sign-compare",
      "-Wno-unused-parameter",
    ]

    if (is_win_gcc) {
      cflags += [
        "-Wno-type-limits",
      ]
    } else {
      cflags += [
        "-Wno-bitfield-width",
        "-Wno-unused-local-typedef",
        # This is for `friend class DynamicMessage` in map_field.h
        "-Wno-microsoft-unqualified-friend",
        "-Wno-invalid-offsetof",
      ]
    }
  } else if (os == "win") {
    # Suppress warnings on Windows.
    cflags += [
      "/wd4100",  # unreferenced formal parameter
      "/wd4125",  # decimal digit terminates octal escape sequence
      "/wd4127",  # conditional expression is constant
      "/wd4146",  # unary minus operator applied to unsigned type
      "/wd4244",  # '=': conversion from 'uint32' to 'uint8'.
      "/wd4309",  # truncation of constant value
      "/wd4456",  # declaration hides previous local declaration
      "/wd4505",  # unreferenced local function has been removed
      "/wd4512",  # assignment operator could not be generated
      "/wd4838",  # require narrowing conversion
    ]
  }
}

nobase_include_headers = [
  "protobuf/src/google/protobuf/stubs/callback.h",
  "protobuf/src/google/protobuf/stubs/common.h",
  "protobuf/src/google/protobuf/stubs/platform_macros.h",
  "protobuf/src/google/protobuf/stubs/port.h",
  "protobuf/src/google/protobuf/stubs/status_macros.h",
  "protobuf/src/google/protobuf/raw_ptr.h",
  "protobuf/src/google/protobuf/reflection_mode.h",
  "protobuf/src/google/protobuf/feature_resolver.h",
  "protobuf/src/google/protobuf/inlined_string_field.h",
  "protobuf/src/google/protobuf/generated_message_tctable_gen.h",
  "protobuf/src/google/protobuf/port.h",
  "protobuf/src/google/protobuf/any.pb.h",
  "protobuf/src/google/protobuf/api.pb.h",
  "protobuf/src/google/protobuf/any.h",
  "protobuf/src/google/protobuf/arena.h",
  "protobuf/src/google/protobuf/arena_impl.h",
  "protobuf/src/google/protobuf/arenastring.h",
  "protobuf/src/google/protobuf/descriptor_database.h",
  "protobuf/src/google/protobuf/descriptor.h",
  "protobuf/src/google/protobuf/descriptor.pb.h",
  "protobuf/src/google/protobuf/duration.pb.h",
  "protobuf/src/google/protobuf/dynamic_message.h",
  "protobuf/src/google/protobuf/empty.pb.h",
  "protobuf/src/google/protobuf/extension_set.h",
  "protobuf/src/google/protobuf/field_mask.pb.h",
  "protobuf/src/google/protobuf/generated_enum_reflection.h",
  "protobuf/src/google/protobuf/generated_enum_util.h",
  "protobuf/src/google/protobuf/generated_message_reflection.h",
  "protobuf/src/google/protobuf/generated_message_table_driven.h",
  "protobuf/src/google/protobuf/generated_message_util.h",
  "protobuf/src/google/protobuf/has_bits.h",
  "protobuf/src/google/protobuf/implicit_weak_message.h",
  "protobuf/src/google/protobuf/map.h",
  "protobuf/src/google/protobuf/map_entry.h",
  "protobuf/src/google/protobuf/map_entry_lite.h",
  "protobuf/src/google/protobuf/map_field.h",
  "protobuf/src/google/protobuf/map_field_inl.h",
  "protobuf/src/google/protobuf/map_field_lite.h",
  "protobuf/src/google/protobuf/map_type_handler.h",
  "protobuf/src/google/protobuf/message.h",
  "protobuf/src/google/protobuf/message_lite.h",
  "protobuf/src/google/protobuf/metadata.h",
  "protobuf/src/google/protobuf/metadata_lite.h",
  "protobuf/src/google/protobuf/reflection.h",
  "protobuf/src/google/protobuf/reflection_ops.h",
  "protobuf/src/google/protobuf/repeated_field.h",
  "protobuf/src/google/protobuf/repeated_ptr_field.h",
  "protobuf/src/google/protobuf/service.h",
  "protobuf/src/google/protobuf/source_context.pb.h",
  "protobuf/src/google/protobuf/struct.pb.h",
  "protobuf/src/google/protobuf/text_format.h",
  "protobuf/src/google/protobuf/timestamp.pb.h",
  "protobuf/src/google/protobuf/type.pb.h",
  "protobuf/src/google/protobuf/.h",
  "protobuf/src/google/protobuf/unknown_field_set.h",
  "protobuf/src/google/protobuf/wire_format.h",
  "protobuf/src/google/protobuf/wire_format_lite.h",
  "protobuf/src/google/protobuf/wrappers.pb.h",
  "protobuf/src/google/protobuf/io/coded_stream.h",
  "protobuf/src/google/protobuf/io/printer.h",
  "protobuf/src/google/protobuf/io/strtod.h",
  "protobuf/src/google/protobuf/io/tokenizer.h",
  "protobuf/src/google/protobuf/io/zero_copy_stream.h",
  "protobuf/src/google/protobuf/io/zero_copy_stream_impl.h",
  "protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.h",
  "protobuf/src/google/protobuf/io/zero_copy_sink.h",
  "protobuf/src/google/protobuf/compiler/code_generator.h",
  "protobuf/src/google/protobuf/compiler/command_line_interface.h",
  "protobuf/src/google/protobuf/compiler/importer.h",
  "protobuf/src/google/protobuf/compiler/parser.h",
  "protobuf/src/google/protobuf/compiler/plugin.h",
  "protobuf/src/google/protobuf/compiler/plugin.pb.h",
  "protobuf/src/google/protobuf/compiler/cpp/cpp_generator.h",
  "protobuf/src/google/protobuf/compiler/csharp/csharp_generator.h",
  "protobuf/src/google/protobuf/compiler/csharp/csharp_names.h",
  "protobuf/src/google/protobuf/compiler/java/generator.h",
  "protobuf/src/google/protobuf/compiler/java/names.h",
  "protobuf/src/google/protobuf/compiler/kotlin/generator.h",
  "protobuf/src/google/protobuf/compiler/js/js_generator.h",
  "protobuf/src/google/protobuf/compiler/js/well_known_types_embed.h",
  "protobuf/src/google/protobuf/compiler/objectivec/objectivec_generator.h",
  "protobuf/src/google/protobuf/compiler/objectivec/objectivec_helpers.h",
  "protobuf/src/google/protobuf/compiler/php/php_generator.h",
  "protobuf/src/google/protobuf/compiler/python/python_generator.h",
  "protobuf/src/google/protobuf/compiler/ruby/ruby_generator.h",
  "protobuf/src/google/protobuf/compiler/retention.h",
  "protobuf/src/google/protobuf/compiler/versions.h",
  "protobuf/src/google/protobuf/generated_enum_util.h",
  "protobuf/src/google/protobuf/util/type_resolver.h",
  "protobuf/src/google/protobuf/util/delimited_message_util.h",
  "protobuf/src/google/protobuf/util/field_comparator.h",
  "protobuf/src/google/protobuf/util/field_mask_util.h",
  "protobuf/src/google/protobuf/util/json_util.h",
  "protobuf/src/google/protobuf/util/time_util.h",
  "protobuf/src/google/protobuf/util/type_resolver_util.h",
  "protobuf/src/google/protobuf/util/message_differencer.h",
  "protobuf/src/google/protobuf/io/gzip_stream.h",
  "protobuf/src/google/protobuf/cpp_features.pb.h",
]

# libprotobuf_lite_la_SOURCES of Makefile.am in protobuf/protobuf/src.
protobuf_lite_sources = [
  "protobuf/src/google/protobuf/port.cc",
  "protobuf/src/google/protobuf/cpp_features.pb.cc",
  "protobuf/src/google/protobuf/any_lite.cc",
  "protobuf/src/google/protobuf/arena.cc",
  "protobuf/src/google/protobuf/arenastring.cc",
  "protobuf/src/google/protobuf/arenastring.h",
  "protobuf/src/google/protobuf/extension_set.cc",
  "protobuf/src/google/protobuf/generated_message_tctable_lite.cc",
  "protobuf/src/google/protobuf/generated_message_tctable_decl.h",
  "protobuf/src/google/protobuf/generated_message_util.cc",
  "protobuf/src/google/protobuf/implicit_weak_message.cc",
  "protobuf/src/google/protobuf/io/coded_stream.cc",
  "protobuf/src/google/protobuf/io/zero_copy_stream.cc",
  "protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc",
  "protobuf/src/google/protobuf/io/zero_copy_sink.cc",
  "protobuf/src/google/protobuf/map.cc",
  "protobuf/src/google/protobuf/map.h",
  "protobuf/src/google/protobuf/raw_ptr.cc",
  "protobuf/src/google/protobuf/reflection_mode.cc",
  "protobuf/src/google/protobuf/generated_enum_util.cc",
  "protobuf/src/google/protobuf/feature_resolver.cc",
  "protobuf/src/google/protobuf/inlined_string_field.cc",
  "protobuf/src/google/protobuf/generated_message_tctable_gen.cc",
  "protobuf/src/google/protobuf/message_lite.cc",
  "protobuf/src/google/protobuf/parse_context.cc",
  "protobuf/src/google/protobuf/parse_context.h",
  "protobuf/src/google/protobuf/repeated_field.cc",
  "protobuf/src/google/protobuf/repeated_ptr_field.cc",
  "protobuf/src/google/protobuf/stubs/common.cc",
  "protobuf/src/google/protobuf/stubs/hash.h",
  "protobuf/src/google/protobuf/stubs/map_util.h",
  "protobuf/src/google/protobuf/stubs/mathutil.h",
  "protobuf/src/google/protobuf/stubs/status_macros.h",
  "protobuf/src/google/protobuf/wire_format_lite.cc",
  "protobuf/src/google/protobuf/compiler/versions.cc",
]

protobuf_lite_cflags = []
if (os == "win" && !is_win_gcc) {
  protobuf_lite_cflags = [
    "/wd4018",  # signed/unsigned mismatch in comparison
    "/wd4065",  # switch statement contains 'default' but no 'case' labels
    "/wd4146",  # unary minus operator applied to unsigned type
    "/wd4244",  # implicit conversion, possible loss of data
    "/wd4267",  # size_t to int truncation
    "/wd4291",  # no matching operator delete for a placement new.
    "/wd4305",  # double to float truncation
    "/wd4355",  # 'this' used in base member initializer list
    "/wd4506",  # no definition for inline function (protobuf issue #240)
    "/wd4309",  # Truncation of constant value.
    "/wd4838",  # Narrowing conversion. Doesn't seem to be very useful.
  ]
}

static_library("protobuf_lite") {
  sources = protobuf_lite_sources + nobase_include_headers

  # goma
  configs -= [ "//build/config/compiler:goma_code" ]
  configs += [
    "//build/config/compiler:no_goma_code",

    # Must be after no_goma_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]

  if (os == "win") {
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  public_configs = [
    ":protobuf_config",
    "//third_party/utf8_range:utf8_range_config",
    "//third_party:zlib_config",

    # TODO: crbug.com/167187 fix size_t to int truncations.
    "//build/config/compiler:no_size_t_to_int_warning",
  ]

  public_deps = [ "//third_party/abseil", "//third_party/utf8_range" ]

  cflags = protobuf_lite_cflags
}

static_library("upb_common") {
  sources = [
    "protobuf/upb_generator/common/names.h",
    "protobuf/upb_generator/common/names.cc",
  ]

  # goma
  configs -= [ "//build/config/compiler:goma_code" ]
  configs += [
    "//build/config/compiler:no_goma_code",

    # Must be after no_goma_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]

  if (os == "win") {
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  public_configs = [
    ":protobuf_config",
  ]

  public_deps = [ "//third_party/abseil", "//third_party/utf8_range"  ]

  # deps = [
  #   "//build/config/sanitizers:deps",
  # ]

  cflags = protobuf_lite_cflags
}

static_library("upb_minitable") {
  sources = [
    "protobuf/upb_generator/minitable/names.h",
    "protobuf/upb_generator/minitable/names.cc",
    "protobuf/upb_generator/minitable/names_internal.h",
    "protobuf/upb_generator/minitable/names_internal.cc",
    "protobuf/upb/port/atomic.h",
    "protobuf/upb/port/vsnprintf_compat.h",
  ]

  # goma
  configs -= [ "//build/config/compiler:goma_code" ]
  configs += [
    "//build/config/compiler:no_goma_code",

    # Must be after no_goma_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]

  if (os == "win") {
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  public_configs = [
    ":protobuf_config",
  ]

  public_deps = [ "//third_party/abseil", "//third_party/utf8_range", ":upb_common"  ]

  cflags = protobuf_lite_cflags
}


# This is the full, heavy protobuf lib that's needed for c++ .protos that don't
# specify the LITE_RUNTIME option. The protocol compiler itself (protoc) falls
# into that category. Do not use in Chrome code.
static_library("protobuf_full") {
  # Prevent people from depending on this outside our file.
  # visibility = [ ":*" ]

  sources = protobuf_lite_sources + nobase_include_headers
  sources += [
    "protobuf/src/google/protobuf/any.cc",
    "protobuf/src/google/protobuf/any.pb.cc",
    "protobuf/src/google/protobuf/api.pb.cc",
    "protobuf/src/google/protobuf/compiler/importer.cc",
    "protobuf/src/google/protobuf/compiler/parser.cc",
    "protobuf/src/google/protobuf/compiler/retention.cc",
    "protobuf/src/google/protobuf/descriptor.cc",
    "protobuf/src/google/protobuf/descriptor.pb.cc",
    "protobuf/src/google/protobuf/descriptor_database.cc",
    "protobuf/src/google/protobuf/duration.pb.cc",
    "protobuf/src/google/protobuf/dynamic_message.cc",
    "protobuf/src/google/protobuf/empty.pb.cc",
    "protobuf/src/google/protobuf/extension_set_heavy.cc",
    "protobuf/src/google/protobuf/field_mask.pb.cc",
    "protobuf/src/google/protobuf/generated_message_reflection.cc",
    "protobuf/src/google/protobuf/generated_message_tctable_full.cc",
    "protobuf/src/google/protobuf/generated_message_tctable_decl.h",
    "protobuf/src/google/protobuf/io/gzip_stream.cc",
    "protobuf/src/google/protobuf/io/io_win32.cc",
    "protobuf/src/google/protobuf/io/printer.cc",
    "protobuf/src/google/protobuf/io/strtod.cc",
    "protobuf/src/google/protobuf/io/tokenizer.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc",
    "protobuf/src/google/protobuf/map_field.cc",
    "protobuf/src/google/protobuf/message.cc",
    "protobuf/src/google/protobuf/reflection_internal.h",
    "protobuf/src/google/protobuf/reflection_ops.cc",
    "protobuf/src/google/protobuf/service.cc",
    "protobuf/src/google/protobuf/source_context.pb.cc",
    "protobuf/src/google/protobuf/struct.pb.cc",
    "protobuf/src/google/protobuf/text_format.cc",
    "protobuf/src/google/protobuf/timestamp.pb.cc",
    "protobuf/src/google/protobuf/type.pb.cc",
    "protobuf/src/google/protobuf/unknown_field_set.cc",
    "protobuf/src/google/protobuf/util/delimited_message_util.cc",
    "protobuf/src/google/protobuf/util/field_comparator.cc",
    "protobuf/src/google/protobuf/util/field_mask_util.cc",
    "protobuf/src/google/protobuf/util/message_differencer.cc",
    "protobuf/src/google/protobuf/util/time_util.cc",
    "protobuf/src/google/protobuf/util/type_resolver_util.cc",
    "protobuf/src/google/protobuf/wire_format.cc",
    "protobuf/src/google/protobuf/wrappers.pb.cc",
  ]

  configs -= [ "//build/config/compiler:goma_code" ]
  configs += [
    "//build/config/compiler:no_goma_code",

    # Must be after no_goma_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]
  if (os == "win") {
    configs -= [ "//build/config/win:lean_and_mean" ]
  }
  public_configs = [
    ":protobuf_config",
    "//third_party/utf8_range:utf8_range_config",
    "//third_party:zlib_config",

    # TODO: crbug.com/167187 fix size_t to int truncations.
    "//build/config/compiler:no_size_t_to_int_warning",
  ]

  deps = [ "//third_party:zlib", "//third_party/abseil", "//third_party/utf8_range", ":upb_minitable"  ]
  public_deps = [ "//third_party/abseil" , "//third_party/utf8_range", ":upb_minitable" ]

  cflags = protobuf_lite_cflags
}

static_library("protoc_lib_kotlin") {
    sources = [
      "protobuf/src/google/protobuf/compiler/kotlin/file.cc",
      "protobuf/src/google/protobuf/compiler/kotlin/file.h",
      "protobuf/src/google/protobuf/compiler/kotlin/generator.cc",
      "protobuf/src/google/protobuf/compiler/kotlin/generator.h",
      "protobuf/src/google/protobuf/compiler/kotlin/message.cc",
      "protobuf/src/google/protobuf/compiler/kotlin/message.h",
    ]

    deps = []

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib_java") {
    sources = [
      "protobuf/src/google/protobuf/compiler/java/context.cc",
      "protobuf/src/google/protobuf/compiler/java/context.h",
      "protobuf/src/google/protobuf/compiler/java/doc_comment.cc",
      "protobuf/src/google/protobuf/compiler/java/doc_comment.h",
      "protobuf/src/google/protobuf/compiler/java/field_common.cc",
      "protobuf/src/google/protobuf/compiler/java/field_common.h",
      "protobuf/src/google/protobuf/compiler/java/file.cc",
      "protobuf/src/google/protobuf/compiler/java/file.h",
      "protobuf/src/google/protobuf/compiler/java/generator.cc",
      "protobuf/src/google/protobuf/compiler/java/generator.h",
      "protobuf/src/google/protobuf/compiler/java/generator_common.h",
      "protobuf/src/google/protobuf/compiler/java/generator_factory.h",
      "protobuf/src/google/protobuf/compiler/java/helpers.cc",
      "protobuf/src/google/protobuf/compiler/java/helpers.h",
      "protobuf/src/google/protobuf/compiler/java/internal_helpers.cc",
      "protobuf/src/google/protobuf/compiler/java/internal_helpers.h",
      "protobuf/src/google/protobuf/compiler/java/name_resolver.cc",
      "protobuf/src/google/protobuf/compiler/java/name_resolver.h",
      "protobuf/src/google/protobuf/compiler/java/options.h",
      "protobuf/src/google/protobuf/compiler/java/shared_code_generator.cc",
      "protobuf/src/google/protobuf/compiler/java/shared_code_generator.h",
      "protobuf/src/google/protobuf/compiler/java/message_serialization.h",
      "protobuf/src/google/protobuf/compiler/java/message_serialization.cc",
      "protobuf/src/google/protobuf/compiler/java/names.cc",
      "protobuf/src/google/protobuf/compiler/java/names.h",
      "protobuf/src/google/protobuf/compiler/java/java_features.pb.cc",
      "protobuf/src/google/protobuf/compiler/java/java_features.pb.h",
      "protobuf/src/google/protobuf/compiler/java/java_generator.h",
    ]

    deps = [
      ":protoc_lib_java_full",
      ":protoc_lib_java_lite",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib_java_full") {
    sources = [
      "protobuf/src/google/protobuf/compiler/java/full/enum.cc",
      "protobuf/src/google/protobuf/compiler/java/full/enum.h",
      "protobuf/src/google/protobuf/compiler/java/full/enum_field.cc",
      "protobuf/src/google/protobuf/compiler/java/full/enum_field.h",
      "protobuf/src/google/protobuf/compiler/java/full/extension.cc",
      "protobuf/src/google/protobuf/compiler/java/full/extension.h",
      "protobuf/src/google/protobuf/compiler/java/full/field_generator.h",
      "protobuf/src/google/protobuf/compiler/java/full/generator_factory.cc",
      "protobuf/src/google/protobuf/compiler/java/full/generator_factory.h",
      "protobuf/src/google/protobuf/compiler/java/full/make_field_gens.cc",
      "protobuf/src/google/protobuf/compiler/java/full/make_field_gens.h",
      "protobuf/src/google/protobuf/compiler/java/full/map_field.cc",
      "protobuf/src/google/protobuf/compiler/java/full/map_field.h",
      "protobuf/src/google/protobuf/compiler/java/full/message.cc",
      "protobuf/src/google/protobuf/compiler/java/full/message.h",
      "protobuf/src/google/protobuf/compiler/java/full/message_builder.cc",
      "protobuf/src/google/protobuf/compiler/java/full/message_builder.h",
      "protobuf/src/google/protobuf/compiler/java/full/message_field.cc",
      "protobuf/src/google/protobuf/compiler/java/full/message_field.h",
      "protobuf/src/google/protobuf/compiler/java/full/primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/java/full/primitive_field.h",
      "protobuf/src/google/protobuf/compiler/java/full/service.cc",
      "protobuf/src/google/protobuf/compiler/java/full/service.h",
      "protobuf/src/google/protobuf/compiler/java/full/string_field.cc",
      "protobuf/src/google/protobuf/compiler/java/full/string_field.h",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib_java_lite") {
    sources = [
      "protobuf/src/google/protobuf/compiler/java/lite/enum_field.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/enum_field.h",
      "protobuf/src/google/protobuf/compiler/java/lite/enum.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/enum.h",
      "protobuf/src/google/protobuf/compiler/java/lite/extension.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/extension.h",
      "protobuf/src/google/protobuf/compiler/java/lite/field_generator.h",
      "protobuf/src/google/protobuf/compiler/java/lite/generator_factory.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/generator_factory.h",
      "protobuf/src/google/protobuf/compiler/java/lite/make_field_gens.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/make_field_gens.h",
      "protobuf/src/google/protobuf/compiler/java/lite/map_field.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/map_field.h",
      "protobuf/src/google/protobuf/compiler/java/lite/message_builder.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/message_builder.h",
      "protobuf/src/google/protobuf/compiler/java/lite/message_field.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/message_field.h",
      "protobuf/src/google/protobuf/compiler/java/lite/message.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/message.h",
      "protobuf/src/google/protobuf/compiler/java/lite/primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/primitive_field.h",
      "protobuf/src/google/protobuf/compiler/java/lite/string_field.cc",
      "protobuf/src/google/protobuf/compiler/java/lite/string_field.h",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib_cpp") {
    sources = [
      "protobuf/src/google/protobuf/compiler/cpp/enum.cc",
      "protobuf/src/google/protobuf/compiler/cpp/enum.h",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/enum_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/extension.cc",
      "protobuf/src/google/protobuf/compiler/cpp/extension.h",
      "protobuf/src/google/protobuf/compiler/cpp/field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/field.h",
      "protobuf/src/google/protobuf/compiler/cpp/file.cc",
      "protobuf/src/google/protobuf/compiler/cpp/file.h",
      "protobuf/src/google/protobuf/compiler/cpp/generator.cc",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/generators.h",
      "protobuf/src/google/protobuf/compiler/cpp/helpers.cc",
      "protobuf/src/google/protobuf/compiler/cpp/helpers.h",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/map_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/message.cc",
      "protobuf/src/google/protobuf/compiler/cpp/message.h",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/message_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/message_layout_helper.h",
      "protobuf/src/google/protobuf/compiler/cpp/options.h",
      "protobuf/src/google/protobuf/compiler/cpp/padding_optimizer.cc",
      "protobuf/src/google/protobuf/compiler/cpp/padding_optimizer.h",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/service.cc",
      "protobuf/src/google/protobuf/compiler/cpp/service.h",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/string_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/string_view_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/field_generators/cord_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/parse_function_generator.cc",
      "protobuf/src/google/protobuf/compiler/cpp/parse_function_generator.h",
      "protobuf/src/google/protobuf/compiler/cpp/tracker.h",
      "protobuf/src/google/protobuf/compiler/cpp/tracker.cc",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}


static_library("protoc_lib_objectivec") {
    sources = [
      "protobuf/src/google/protobuf/compiler/objectivec/enum.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/enum.h",
      "protobuf/src/google/protobuf/compiler/objectivec/enum_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/enum_field.h",
      "protobuf/src/google/protobuf/compiler/objectivec/extension.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/extension.h",
      "protobuf/src/google/protobuf/compiler/objectivec/field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/field.h",
      "protobuf/src/google/protobuf/compiler/objectivec/file.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/file.h",
      "protobuf/src/google/protobuf/compiler/objectivec/generator.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/helpers.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/helpers.h",
      "protobuf/src/google/protobuf/compiler/objectivec/map_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/map_field.h",
      "protobuf/src/google/protobuf/compiler/objectivec/message.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/message.h",
      "protobuf/src/google/protobuf/compiler/objectivec/message_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/message_field.h",
      "protobuf/src/google/protobuf/compiler/objectivec/names.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/names.h",
      "protobuf/src/google/protobuf/compiler/objectivec/oneof.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/oneof.h",
      "protobuf/src/google/protobuf/compiler/objectivec/primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/primitive_field.h",
      "protobuf/src/google/protobuf/compiler/objectivec/tf_decode_data.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/import_writer.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/line_consumer.h",
      "protobuf/src/google/protobuf/compiler/objectivec/line_consumer.cc",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}


static_library("protoc_lib_python") {
    sources = [
      "protobuf/src/google/protobuf/compiler/python/generator.cc",
      "protobuf/src/google/protobuf/compiler/python/pyi_generator.cc",
      "protobuf/src/google/protobuf/compiler/python/pyi_generator.h",
      "protobuf/src/google/protobuf/compiler/python/helpers.cc",
      "protobuf/src/google/protobuf/compiler/python/helpers.h",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib_php") {
    sources = [
      "protobuf/src/google/protobuf/compiler/php/php_generator.cc",
      "protobuf/src/google/protobuf/compiler/php/names.cc",
      "protobuf/src/google/protobuf/compiler/php/names.h",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib_rust") {
    sources = [
    "protobuf/src/google/protobuf/compiler/rust/accessors/accessor_case.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/accessor_case.h",
    "protobuf/src/google/protobuf/compiler/rust/accessors/accessor_generator.h",
    "protobuf/src/google/protobuf/compiler/rust/accessors/accessors.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/accessors.h",
    "protobuf/src/google/protobuf/compiler/rust/accessors/default_value.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/default_value.h",
    "protobuf/src/google/protobuf/compiler/rust/accessors/map.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/repeated_field.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/singular_cord.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/singular_message.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/singular_scalar.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/singular_string.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/unsupported_field.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/with_presence.cc",
    "protobuf/src/google/protobuf/compiler/rust/accessors/with_presence.h",
    "protobuf/src/google/protobuf/compiler/rust/context.cc",
    "protobuf/src/google/protobuf/compiler/rust/context.h",
    "protobuf/src/google/protobuf/compiler/rust/crate_mapping.cc",
    "protobuf/src/google/protobuf/compiler/rust/crate_mapping.h",
    "protobuf/src/google/protobuf/compiler/rust/enum.cc",
    "protobuf/src/google/protobuf/compiler/rust/enum.h",
    "protobuf/src/google/protobuf/compiler/rust/generator.cc",
    "protobuf/src/google/protobuf/compiler/rust/generator.h",
    "protobuf/src/google/protobuf/compiler/rust/message.cc",
    "protobuf/src/google/protobuf/compiler/rust/message.h",
    "protobuf/src/google/protobuf/compiler/rust/naming.cc",
    "protobuf/src/google/protobuf/compiler/rust/naming.h",
    "protobuf/src/google/protobuf/compiler/rust/oneof.cc",
    "protobuf/src/google/protobuf/compiler/rust/oneof.h",
    "protobuf/src/google/protobuf/compiler/rust/relative_path.cc",
    "protobuf/src/google/protobuf/compiler/rust/relative_path.h",
    "protobuf/src/google/protobuf/compiler/rust/rust_field_type.cc",
    "protobuf/src/google/protobuf/compiler/rust/rust_field_type.h",
    "protobuf/src/google/protobuf/compiler/rust/rust_keywords.cc",
    "protobuf/src/google/protobuf/compiler/rust/rust_keywords.h",
    "protobuf/src/google/protobuf/compiler/rust/upb_helpers.cc",
    "protobuf/src/google/protobuf/compiler/rust/upb_helpers.h",
    "protobuf/src/google/protobuf/testing/file.cc",
    "protobuf/src/google/protobuf/testing/file.h",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}


static_library("protoc_lib_ruby") {
    sources = [
      "protobuf/src/google/protobuf/compiler/ruby/ruby_generator.cc",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}



static_library("protoc_lib_csharp") {
    sources = [
      "protobuf/src/google/protobuf/compiler/csharp/csharp_doc_comment.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_doc_comment.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_enum.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_enum.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_enum_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_field_base.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_field_base.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_generator.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_map_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_map_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_message.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_message.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_message_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_message_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_options.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_primitive_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_reflection_class.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_reflection_class.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_enum_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_message_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_message_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_primitive_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_source_generator_base.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_source_generator_base.h",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_wrapper_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_wrapper_field.h",
      "protobuf/src/google/protobuf/compiler/csharp/names.cc",
      "protobuf/src/google/protobuf/compiler/csharp/names.h",
    ]

    configs -= [ "//build/config/compiler:goma_code" ]
    configs += [
      "//build/config/compiler:no_goma_code",

      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
    ]
    if (os == "win") {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
}

static_library("protoc_lib") {
  sources = [
    "protobuf/src/google/protobuf/compiler/code_generator.cc",
    "protobuf/src/google/protobuf/compiler/code_generator_lite.cc",
    "protobuf/src/google/protobuf/compiler/command_line_interface.cc",
    "protobuf/src/google/protobuf/compiler/plugin.cc",
    "protobuf/src/google/protobuf/compiler/plugin.pb.cc",
    "protobuf/src/google/protobuf/compiler/subprocess.cc",
    "protobuf/src/google/protobuf/compiler/subprocess.h",
    "protobuf/src/google/protobuf/compiler/zip_writer.cc",
    "protobuf/src/google/protobuf/compiler/zip_writer.h",
  ]

  configs -= [ "//build/config/compiler:goma_code" ]
  configs += [
    "//build/config/compiler:no_goma_code",

    # Must be after no_chromium_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]
  if (os == "win") {
    # This is defined internally, don't warn on duplicate.
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  deps = [
    ":protoc_lib_cpp",
    ":protoc_lib_java",
    ":protoc_lib_kotlin",
    ":protoc_lib_objectivec",
    ":protoc_lib_python",
    ":protoc_lib_php",
    ":protoc_lib_ruby",
    ":protoc_lib_csharp",
    ":protoc_lib_rust",
    "//third_party/utf8_range",
  ]

  public_configs = [ ":protobuf_config" ]

  cflags = protobuf_lite_cflags

  public_deps = [ ":protobuf_full", "//third_party/abseil", "//third_party/utf8_range" ]
}

# Only compile the compiler for the host architecture.
executable("protoc") {
  sources = [ "protobuf/src/google/protobuf/compiler/main.cc" ]

  configs -= [ "//build/config/compiler:goma_code" ]
  configs += [ "//build/config/compiler:no_goma_code" ]

  cflags = protobuf_lite_cflags

  deps = [
    ":protoc_lib",

    # Default manifest on Windows (a no-op elsewhere).
    # "//build/win:default_exe_manifest",

    "//build/config:exe_and_shlib_deps",
  ]
}
